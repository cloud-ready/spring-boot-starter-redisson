# GIT_STRATEGY: none Clone manually as a resolution of https clone is not available, and runner can't do ssh clone automatically
# Issue 3378 Uploading untracked artifacts includes ignored files, see: https://gitlab.com/gitlab-org/gitlab-runner/issues/3378
# Issue 4072 artifacts ignore paths                              , see: https://gitlab.com/gitlab-org/gitlab-ce/issues/4072

.git_refs_develop_only: &git_refs_develop_only
  only:
    - develop

.git_refs_of_snapshots: &git_refs_of_snapshots
  except:
    - master
    - /^hotfix\/.+$/
    - /^release\/.+$/
    - /^support\/.*$/
    - /^v\d+\.\d+(\.\d+)?(-\S*)?/

.git_refs_of_releases: &git_refs_of_releases
  only:
    - /^hotfix\/.+$/
    - /^release\/.+$/
    - /^support\/.*$/
    #- temp

.git_strategy_fetch: &git_strategy_fetch
  variables:
    GIT_STRATEGY: fetch

.git_strategy_manual: &git_strategy_manual
  variables:
    GIT_STRATEGY: none

.script_build: &script_build
  script:
    - if [[ -z "${CI_OPT_MAVEN_EFFECTIVE_POM}" ]]; then export CI_OPT_MAVEN_EFFECTIVE_POM="true"; fi;
      time ./mvnw -e -ntp -U clean package;
      find .mvn/profilerReport -name "*.json" | xargs cat | jq -r '.projects[]|"module:", .project, "plugins", (.mojos[]|[.mojo,.time]|@tsv)' | column -t;
      echo archive $(git ls-files -o | grep -Ev '.+-exec\.jar' | grep -v 'artifacts.tar.gz' | wc -l) files into artifacts.tar.gz;
      git ls-files -o | grep -Ev '.+-exec\.jar' | grep -v 'artifacts.tar.gz' | tar -czf artifacts.tar.gz -T -;
      #git ls-files -o | grep -Ev '.+-exec\.jar' | grep -v 'artifacts.tar.gz' | xargs rm -f;

.script_publish: &script_publish
  script:
    # force publish on temp branch push
    #- export CI_OPT_PUBLISH_TO_REPO="true";
    - if [ -f artifacts.tar.gz ]; then tar -xzf artifacts.tar.gz; fi;
      export CI_OPT_MAVEN_CLEAN_SKIP="true"; export CI_OPT_MAVEN_INTEGRATIONTEST_SKIP="true"; export CI_OPT_MAVEN_TEST_SKIP="true";
      time ./mvnw -e -ntp deploy;
      find .mvn/profilerReport -name "*.json" | xargs cat | jq -r '.projects[]|"module:", .project, "plugins", (.mojos[]|[.mojo,.time]|@tsv)' | column -t;
      echo archive $(git ls-files -o | grep -Ev '.+-exec\.jar' | grep -v 'artifacts.tar.gz' | wc -l) files into artifacts.tar.gz;
      git ls-files -o | grep -Ev '.+-exec\.jar' | grep -v 'artifacts.tar.gz' | tar -czf artifacts.tar.gz -T -;

.script_site: &script_site
  script:
    - if [ -f artifacts.tar.gz ]; then tar -xzf artifacts.tar.gz; fi;
      export CI_OPT_MAVEN_CLEAN_SKIP="true"; export CI_OPT_MAVEN_INTEGRATIONTEST_SKIP="true"; export CI_OPT_MAVEN_TEST_SKIP="true";
      if [[ -z ${CI_OPT_GITHUB_SITE_PUBLISH} ]]; then
        if [[ "${CI_COMMIT_REF_NAME}" =~ ^release/.+ ]] || [[ "${CI_COMMIT_REF_NAME}" =~ ^support/.+ ]]; then export CI_OPT_GITHUB_SITE_PUBLISH="true"; else export CI_OPT_GITHUB_SITE_PUBLISH="false"; fi;
      fi;
      if [[ "${CI_OPT_GITHUB_SITE_PUBLISH}" == "true" ]]; then
        export CI_OPT_GITHUB_GLOBAL_REPOSITORYOWNER="$(echo ${CI_PROJECT_PATH} | awk -F'/' '{print $1}')";
        export CI_OPT_SITE_PATH_PREFIX="${CI_OPT_GITHUB_GLOBAL_REPOSITORYOWNER}";
      else
        export CI_OPT_SITE_PATH_PREFIX="${CI_PROJECT_PATH}";
      fi;
      if [ "${CI_OPT_GITHUB_SITE_PUBLISH}" == "true" ]; then
        time ./mvnw -e -ntp site site-deploy;
      else
        time ./mvnw -e -ntp site site:stage site:stage-deploy;
      fi;
      find .mvn/profilerReport -name "*.json" | xargs cat | jq -r '.projects[]|"module:", .project, "plugins", (.mojos[]|[.mojo,.time]|@tsv)' | column -t;

.upload_files_for_latter_stages: &upload_files_for_latter_stages
  artifacts:
    expire_in: 1 day
    paths:
      - artifacts.tar.gz

before_script:
  - if [ -f ~/env ]; then source ~/env; fi;
  - set -ex;
  # info
  - echo "HOST_HOSTNAME '${HOST_HOSTNAME}', HOST_IPADDRESS '${HOST_IPADDRESS}'";
    echo working directory `pwd`;
    echo CI_PROJECT_URL ${CI_PROJECT_URL} CI_COMMIT_REF_NAME ${CI_COMMIT_REF_NAME}, CI_COMMIT_SHA ${CI_COMMIT_SHA}, CI_PROJECT_NAME ${CI_PROJECT_NAME}, CI_PROJECT_NAMESPACE ${CI_PROJECT_NAMESPACE};
  # environment variables
  # Settings -> CI / CD -> Variables -> Expand -> Save Variables
  # CI_OPT_GPG_PASSPHRASE
  # CI_OPT_MAVEN_CENTRAL_PASS
  # CI_OPT_MAVEN_CENTRAL_USER
  # CI_OPT_OPENSOURCE_GIT_AUTH_TOKEN
  # CI_OPT_OPENSOURCE_MVNSITE_PASSWORD
  # CI_OPT_OPENSOURCE_MVNSITE_USERNAME
  # CI_OPT_ORIGIN_REPO_SLUG
  # CI_OPT_SONAR_LOGIN
  - export CI_OPT_GIT_HOST="${CI_OPT_GIT_HOST:-gitlab.com}";
    if [ -z "${CI_OPT_GIT_PREFIX}" ]; then export CI_OPT_GIT_PREFIX="https://${CI_OPT_GIT_HOST}"; fi;
    export CI_OPT_GPG_KEYNAME="${CI_OPT_GPG_KEYNAME:-59DBF10E}";
    export CI_OPT_INFRASTRUCTURE="${CI_OPT_INFRASTRUCTURE:-opensource}";
    export CI_OPT_MVN_DEPLOY_PUBLISH_SEGREGATION="true";
    export CI_OPT_ORIGIN_REPO_SLUG="${CI_OPT_ORIGIN_REPO_SLUG:-gitlab-cloud-ready/spring-boot-starter-redisson}";
    export CI_OPT_SONAR_ORGANIZATION="${CI_OPT_SONAR_ORGANIZATION:-home1-oss-github}";
  - export GITLAB_CI="${GITLAB_CI:-true}";
    if [[ "${CI_OPT_FAST}" != "true" ]]; then export CI_OPT_MAVEN_EFFECTIVE_POM="${CI_OPT_MAVEN_EFFECTIVE_POM:-false}"; fi;
    if [[ "${CI_OPT_FAST}" != "true" ]]; then export CI_OPT_SITE="${CI_OPT_SITE:-true}"; fi;
    if [[ "${CI_OPT_FAST}" != "true" ]]; then export CI_OPT_SONAR="${CI_OPT_SONAR:-true}"; fi;
  - if [[ -z "${CI_OPT_MAVEN_BUILD_OPTS_REPO}" ]]; then export CI_OPT_MAVEN_BUILD_OPTS_REPO="${CI_OPT_GIT_PREFIX}/ci-and-cd/maven-build-opts-${CI_OPT_INFRASTRUCTURE:-opensource}"; fi;
    export CI_OPT_MAVEN_BUILD_OPTS_REPO_REF="${CI_OPT_MAVEN_BUILD_OPTS_REPO_REF:-master}";
    export SETTINGS_GLOBAL_XML="${SETTINGS_GLOBAL_XML:-/tmp/settings-global-${CI_COMMIT_SHA}.xml}";
    export SETTINGS_GLOBAL_XML_URL="${CI_OPT_MAVEN_BUILD_OPTS_REPO}/raw/${CI_OPT_MAVEN_BUILD_OPTS_REPO_REF}/src/main/maven/settings-global.xml";
  - if [[ -z "${MAVEN_OPTS}" ]]; then export MAVEN_OPTS="-XX:TieredStopAtLevel=1 -XX:+UseParallelGC -Dprofile -DprofileFormat=JSON,HTML"; fi;
    ./mvnw -version;
    echo "download ${SETTINGS_GLOBAL_XML_URL} to ${SETTINGS_GLOBAL_XML}";
    curl -L "${SETTINGS_GLOBAL_XML_URL}" 2>/dev/null | tee ${SETTINGS_GLOBAL_XML};
    mv -f ${SETTINGS_GLOBAL_XML} ~/.m2/wrapper/dists/apache-maven-3.6.1-bin/38pn40mp89t5c94bjdbeod370m/apache-maven-3.6.1/conf/settings.xml;
    rm -rf ~/.m2/repository/top/infra/maven-build-extension;
    rm -f ~/.m2/settings*.xml;
    rm -f ~/.m2/toolchains*.xml;
    ls -ahl ~/.m2;

build_snapshots:
  <<: *git_refs_of_snapshots
  <<: *script_build
  <<: *upload_files_for_latter_stages
  stage: build
  <<: *git_strategy_fetch

analysis:
  dependencies:
    - build_snapshots
  <<: *git_refs_develop_only
  stage: analysis
  script:
    - if [ -f artifacts.tar.gz ]; then tar -xzf artifacts.tar.gz; fi;
      export CI_OPT_MAVEN_CLEAN_SKIP="true";
      time ./mvnw -e -ntp sonar:sonar;
      find .mvn/profilerReport -name "*.json" | xargs cat | jq -r '.projects[]|"module:", .project, "plugins", (.mojos[]|[.mojo,.time]|@tsv)' | column -t;
  <<: *git_strategy_fetch

publish_snapshots:
  dependencies:
    - build_snapshots
  <<: *git_refs_of_snapshots
  <<: *script_publish
  <<: *upload_files_for_latter_stages
  stage: publish
  <<: *git_strategy_fetch

site_snapshots:
  dependencies:
    - publish_snapshots
  <<: *git_refs_develop_only
  <<: *script_site
  stage: site
  <<: *git_strategy_fetch

build_releases:
  <<: *git_refs_of_releases
  <<: *script_build
  <<: *upload_files_for_latter_stages
  stage: build
  <<: *git_strategy_fetch

publish_releases:
  dependencies:
    - build_releases
  <<: *git_refs_of_releases
  <<: *script_publish
  <<: *upload_files_for_latter_stages
  stage: publish
  <<: *git_strategy_fetch

site_releases:
  dependencies:
    - publish_releases
  <<: *git_refs_of_releases
  <<: *script_site
  stage: site
  <<: *git_strategy_fetch

stages:
  - build
  - analysis
  - publish
  - site
